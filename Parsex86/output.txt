const instructions = {
	'aaa': 'ASCII Adjust After Addition',
	'aad': 'ASCII Adjust AX Before Division',
	'aam': 'ASCII Adjust AX After Multiply',
	'aas': 'ASCII Adjust AL After Subtraction',
	'adc': 'Add with Carry',
	'adcx': 'Unsigned Integer Addition of Two Operands with Carry Flag',
	'add': 'Add',
	'addpd': 'Add Packed Double-Precision Floating-Point Values',
	'addps': 'Add Packed Single-Precision Floating-Point Values',
	'addsd': 'Add Scalar Double-Precision Floating-Point Values',
	'addss': 'Add Scalar Single-Precision Floating-Point Values',
	'addsubpd': 'Packed Double-FP Add/Subtract',
	'addsubps': 'Packed Single-FP Add/Subtract',
	'adox': 'Unsigned Integer Addition of Two Operands with Overflow Flag',
	'aesdec': 'Perform One Round of an AES Decryption Flow',
	'aesdeclast': 'Perform Last Round of an AES Decryption Flow',
	'aesenc': 'Perform One Round of an AES Encryption Flow',
	'aesenclast': 'Perform Last Round of an AES Encryption Flow',
	'aesimc': 'Perform the AES InvMixColumn Transformation',
	'aeskeygenassist': 'AES Round Key Generation Assist',
	'and': 'Logical AND',
	'andn': 'Logical AND NOT',
	'andnpd': 'Bitwise Logical AND NOT of Packed Double Precision Floating-Point Values',
	'andnps': 'Bitwise Logical AND NOT of Packed Single Precision Floating-Point Values',
	'andpd': 'Bitwise Logical AND of Packed Double Precision Floating-Point Values',
	'andps': 'Bitwise Logical AND of Packed Single Precision Floating-Point Values',
	'arpl': 'Adjust RPL Field of Segment Selector',
	'bextr': 'Bit Field Extract',
	'blendpd': 'Blend Packed Double Precision Floating-Point Values',
	'blendps': 'Blend Packed Single Precision Floating-Point Values',
	'blendvpd': 'Variable Blend Packed Double Precision Floating-Point Values',
	'blendvps': 'Variable Blend Packed Single Precision Floating-Point Values',
	'blsi': 'Extract Lowest Set Isolated Bit',
	'blsmsk': 'Get Mask Up to Lowest Set Bit',
	'blsr': 'Reset Lowest Set Bit',
	'bndcl': 'Check Lower Bound',
	'bndcn': 'Check Upper Bound',
	'bndcu': 'Check Upper Bound',
	'bndldx': 'Load Extended Bounds Using Address Translation',
	'bndmk': 'Make Bounds',
	'bndmov': 'Move Bounds',
	'bndstx': 'Store Extended Bounds Using Address Translation',
	'bound': 'Check Array Index Against Bounds',
	'bsf': 'Bit Scan Forward',
	'bsr': 'Bit Scan Reverse',
	'bswap': 'Byte Swap',
	'bt': 'Bit Test',
	'btc': 'Bit Test and Complement',
	'btr': 'Bit Test and Reset',
	'bts': 'Bit Test and Set',
	'bzhi': 'Zero High Bits Starting with Specified Bit Position',
	'call': 'Call Procedure',
	'cbw': 'Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to Quadword',
	'cdq': 'Convert Word to Doubleword/Convert Doubleword to Quadword',
	'cdqe': 'Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to Quadword',
	'clac': 'Clear AC Flag in EFLAGS Register',
	'clc': 'Clear Carry Flag',
	'cld': 'Clear Direction Flag',
	'cldemote': 'Cache Line Demote',
	'clflush': 'Flush Cache Line',
	'clflushopt': 'Flush Cache Line Optimized',
	'cli': 'Clear Interrupt Flag',
	'clts': 'Clear Task-Switched Flag in CR0',
	'clwb': 'Cache Line Write Back',
	'cmc': 'Complement Carry Flag',
	'cmovcc': 'Conditional Move',
	'cmp': 'Compare Two Operands',
	'cmppd': 'Compare Packed Double-Precision Floating-Point Values',
	'cmpps': 'Compare Packed Single-Precision Floating-Point Values',
	'cmps': 'Compare String Operands',
	'cmpsb': 'Compare String Operands',
	'cmpsd': 'Compare String Operands',
	'cmpsd (1)': 'Compare Scalar Double-Precision Floating-Point Value',
	'cmpsq': 'Compare String Operands',
	'cmpss': 'Compare Scalar Single-Precision Floating-Point Value',
	'cmpsw': 'Compare String Operands',
	'cmpxchg': 'Compare and Exchange',
	'cmpxchg16b': 'Compare and Exchange Bytes',
	'cmpxchg8b': 'Compare and Exchange Bytes',
	'comisd': 'Compare Scalar Ordered Double-Precision Floating-Point Values and Set EFLAGS',
	'comiss': 'Compare Scalar Ordered Single-Precision Floating-Point Values and Set EFLAGS',
	'cpuid': 'CPU Identification',
	'cqo': 'Convert Word to Doubleword/Convert Doubleword to Quadword',
	'crc32': 'Accumulate CRC32 Value',
	'cvtdq2pd': 'Convert Packed Doubleword Integers to Packed Double-Precision Floating-Point Values',
	'cvtdq2ps': 'Convert Packed Doubleword Integers to Packed Single-Precision Floating-Point Values',
	'cvtpd2dq': 'Convert Packed Double-Precision Floating-Point Values to Packed Doubleword Integers',
	'cvtpd2pi': 'Convert Packed Double-Precision FP Values to Packed Dword Integers',
	'cvtpd2ps': 'Convert Packed Double-Precision Floating-Point Values to Packed Single-Precision Floating-Point Values',
	'cvtpi2pd': 'Convert Packed Dword Integers to Packed Double-Precision FP Values',
	'cvtpi2ps': 'Convert Packed Dword Integers to Packed Single-Precision FP Values',
	'cvtps2dq': 'Convert Packed Single-Precision Floating-Point Values to Packed Signed Doubleword Integer Values',
	'cvtps2pd': 'Convert Packed Single-Precision Floating-Point Values to Packed Double-Precision Floating-Point Values',
	'cvtps2pi': 'Convert Packed Single-Precision FP Values to Packed Dword Integers',
	'cvtsd2si': 'Convert Scalar Double-Precision Floating-Point Value to Doubleword Integer',
	'cvtsd2ss': 'Convert Scalar Double-Precision Floating-Point Value to Scalar Single-Precision Floating-Point Value',
	'cvtsi2sd': 'Convert Doubleword Integer to Scalar Double-Precision Floating-Point Value',
	'cvtsi2ss': 'Convert Doubleword Integer to Scalar Single-Precision Floating-Point Value',
	'cvtss2sd': 'Convert Scalar Single-Precision Floating-Point Value to Scalar Double-Precision Floating-Point Value',
	'cvtss2si': 'Convert Scalar Single-Precision Floating-Point Value to Doubleword Integer',
	'cvttpd2dq': 'Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Doubleword Integers',
	'cvttpd2pi': 'Convert with Truncation Packed Double-Precision FP Values to Packed Dword Integers',
	'cvttps2dq': 'Convert with Truncation Packed Single-Precision Floating-Point Values to Packed Signed Doubleword Integer Values',
	'cvttps2pi': 'Convert with Truncation Packed Single-Precision FP Values to Packed Dword Integers',
	'cvttsd2si': 'Convert with Truncation Scalar Double-Precision Floating-Point Value to Signed Integer',
	'cvttss2si': 'Convert with Truncation Scalar Single-Precision Floating-Point Value to Integer',
	'cwd': 'Convert Word to Doubleword/Convert Doubleword to Quadword',
	'cwde': 'Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to Quadword',
	'daa': 'Decimal Adjust AL after Addition',
	'das': 'Decimal Adjust AL after Subtraction',
	'dec': 'Decrement by 1',
	'div': 'Unsigned Divide',
	'divpd': 'Divide Packed Double-Precision Floating-Point Values',
	'divps': 'Divide Packed Single-Precision Floating-Point Values',
	'divsd': 'Divide Scalar Double-Precision Floating-Point Value',
	'divss': 'Divide Scalar Single-Precision Floating-Point Values',
	'dppd': 'Dot Product of Packed Double Precision Floating-Point Values',
	'dpps': 'Dot Product of Packed Single Precision Floating-Point Values',
	'emms': 'Empty MMX Technology State',
	'enter': 'Make Stack Frame for Procedure Parameters',
	'extractps': 'Extract Packed Floating-Point Values',
	'f2xm1': 'Compute 2xâ€“1',
	'fabs': 'Absolute Value',
	'fadd': 'Add',
	'faddp': 'Add',
	'fbld': 'Load Binary Coded Decimal',
	'fbstp': 'Store BCD Integer and Pop',
	'fchs': 'Change Sign',
	'fclex': 'Clear Exceptions',
	'fcmovcc': 'Floating-Point Conditional Move',
	'fcom': 'Compare Floating Point Values',
	'fcomi': 'Compare Floating Point Values and Set EFLAGS',
	'fcomip': 'Compare Floating Point Values and Set EFLAGS',
	'fcomp': 'Compare Floating Point Values',
	'fcompp': 'Compare Floating Point Values',
	'fcos': 'Cosine',
	'fdecstp': 'Decrement Stack-Top Pointer',
	'fdiv': 'Divide',
	'fdivp': 'Divide',
	'fdivr': 'Reverse Divide',
	'fdivrp': 'Reverse Divide',
	'ffree': 'Free Floating-Point Register',
	'fiadd': 'Add',
	'ficom': 'Compare Integer',
	'ficomp': 'Compare Integer',
	'fidiv': 'Divide',
	'fidivr': 'Reverse Divide',
	'fild': 'Load Integer',
	'fimul': 'Multiply',
	'fincstp': 'Increment Stack-Top Pointer',
	'finit': 'Initialize Floating-Point Unit',
	'fist': 'Store Integer',
	'fistp': 'Store Integer',
	'fisttp': 'Store Integer with Truncation',
	'fisub': 'Subtract',
	'fisubr': 'Reverse Subtract',
	'fld': 'Load Floating Point Value',
	'fld1': 'Load Constant',
	'fldcw': 'Load x87 FPU Control Word',
	'fldenv': 'Load x87 FPU Environment',
	'fldl2e': 'Load Constant',
	'fldl2t': 'Load Constant',
	'fldlg2': 'Load Constant',
	'fldln2': 'Load Constant',
	'fldpi': 'Load Constant',
	'fldz': 'Load Constant',
	'fmul': 'Multiply',
	'fmulp': 'Multiply',
	'fnclex': 'Clear Exceptions',
	'fninit': 'Initialize Floating-Point Unit',
	'fnop': 'No Operation',
	'fnsave': 'Store x87 FPU State',
	'fnstcw': 'Store x87 FPU Control Word',
	'fnstenv': 'Store x87 FPU Environment',
	'fnstsw': 'Store x87 FPU Status Word',
	'fpatan': 'Partial Arctangent',
	'fprem': 'Partial Remainder',
	'fprem1': 'Partial Remainder',
	'fptan': 'Partial Tangent',
	'frndint': 'Round to Integer',
	'frstor': 'Restore x87 FPU State',
	'fsave': 'Store x87 FPU State',
	'fscale': 'Scale',
	'fsin': 'Sine',
	'fsincos': 'Sine and Cosine',
	'fsqrt': 'Square Root',
	'fst': 'Store Floating Point Value',
	'fstcw': 'Store x87 FPU Control Word',
	'fstenv': 'Store x87 FPU Environment',
	'fstp': 'Store Floating Point Value',
	'fstsw': 'Store x87 FPU Status Word',
	'fsub': 'Subtract',
	'fsubp': 'Subtract',
	'fsubr': 'Reverse Subtract',
	'fsubrp': 'Reverse Subtract',
	'ftst': 'TEST',
	'fucom': 'Unordered Compare Floating Point Values',
	'fucomi': 'Compare Floating Point Values and Set EFLAGS',
	'fucomip': 'Compare Floating Point Values and Set EFLAGS',
	'fucomp': 'Unordered Compare Floating Point Values',
	'fucompp': 'Unordered Compare Floating Point Values',
	'fwait': 'Wait',
	'fxam': 'Examine Floating-Point',
	'fxch': 'Exchange Register Contents',
	'fxrstor': 'Restore x87 FPU, MMX, XMM, and MXCSR State',
	'fxsave': 'Save x87 FPU, MMX Technology, and SSE State',
	'fxtract': 'Extract Exponent and Significand',
	'fyl2x': 'Compute y âˆ— log2x',
	'fyl2xp1': 'Compute y âˆ— log2(x +1)',
	'gf2p8affineinvqb': 'Galois Field Affine Transformation Inverse',
	'gf2p8affineqb': 'Galois Field Affine Transformation',
	'gf2p8mulb': 'Galois Field Multiply Bytes',
	'haddpd': 'Packed Double-FP Horizontal Add',
	'haddps': 'Packed Single-FP Horizontal Add',
	'hlt': 'Halt',
	'hsubpd': 'Packed Double-FP Horizontal Subtract',
	'hsubps': 'Packed Single-FP Horizontal Subtract',
	'idiv': 'Signed Divide',
	'imul': 'Signed Multiply',
	'in': 'Input from Port',
	'inc': 'Increment by 1',
	'ins': 'Input from Port to String',
	'insb': 'Input from Port to String',
	'insd': 'Input from Port to String',
	'insertps': 'Insert Scalar Single-Precision Floating-Point Value',
	'insw': 'Input from Port to String',
	'int n': 'Call to Interrupt Procedure',
	'int1': 'Call to Interrupt Procedure',
	'int3': 'Call to Interrupt Procedure',
	'into': 'Call to Interrupt Procedure',
	'invd': 'Invalidate Internal Caches',
	'invlpg': 'Invalidate TLB Entries',
	'invpcid': 'Invalidate Process-Context Identifier',
	'iret': 'Interrupt Return',
	'iretd': 'Interrupt Return',
	'jmp': 'Jump',
	'jcc': 'Jump if Condition Is Met',
	'kaddb': 'ADD Two Masks',
	'kaddd': 'ADD Two Masks',
	'kaddq': 'ADD Two Masks',
	'kaddw': 'ADD Two Masks',
	'kandb': 'Bitwise Logical AND Masks',
	'kandd': 'Bitwise Logical AND Masks',
	'kandnb': 'Bitwise Logical AND NOT Masks',
	'kandnd': 'Bitwise Logical AND NOT Masks',
	'kandnq': 'Bitwise Logical AND NOT Masks',
	'kandnw': 'Bitwise Logical AND NOT Masks',
	'kandq': 'Bitwise Logical AND Masks',
	'kandw': 'Bitwise Logical AND Masks',
	'kmovb': 'Move from and to Mask Registers',
	'kmovd': 'Move from and to Mask Registers',
	'kmovq': 'Move from and to Mask Registers',
	'kmovw': 'Move from and to Mask Registers',
	'knotb': 'NOT Mask Register',
	'knotd': 'NOT Mask Register',
	'knotq': 'NOT Mask Register',
	'knotw': 'NOT Mask Register',
	'korb': 'Bitwise Logical OR Masks',
	'kord': 'Bitwise Logical OR Masks',
	'korq': 'Bitwise Logical OR Masks',
	'kortestb': 'OR Masks And Set Flags',
	'kortestd': 'OR Masks And Set Flags',
	'kortestq': 'OR Masks And Set Flags',
	'kortestw': 'OR Masks And Set Flags',
	'korw': 'Bitwise Logical OR Masks',
	'kshiftlb': 'Shift Left Mask Registers',
	'kshiftld': 'Shift Left Mask Registers',
	'kshiftlq': 'Shift Left Mask Registers',
	'kshiftlw': 'Shift Left Mask Registers',
	'kshiftrb': 'Shift Right Mask Registers',
	'kshiftrd': 'Shift Right Mask Registers',
	'kshiftrq': 'Shift Right Mask Registers',
	'kshiftrw': 'Shift Right Mask Registers',
	'ktestb': 'Packed Bit Test Masks and Set Flags',
	'ktestd': 'Packed Bit Test Masks and Set Flags',
	'ktestq': 'Packed Bit Test Masks and Set Flags',
	'ktestw': 'Packed Bit Test Masks and Set Flags',
	'kunpckbw': 'Unpack for Mask Registers',
	'kunpckdq': 'Unpack for Mask Registers',
	'kunpckwd': 'Unpack for Mask Registers',
	'kxnorb': 'Bitwise Logical XNOR Masks',
	'kxnord': 'Bitwise Logical XNOR Masks',
	'kxnorq': 'Bitwise Logical XNOR Masks',
	'kxnorw': 'Bitwise Logical XNOR Masks',
	'kxorb': 'Bitwise Logical XOR Masks',
	'kxord': 'Bitwise Logical XOR Masks',
	'kxorq': 'Bitwise Logical XOR Masks',
	'kxorw': 'Bitwise Logical XOR Masks',
	'lahf': 'Load Status Flags into AH Register',
	'lar': 'Load Access Rights Byte',
	'lddqu': 'Load Unaligned Integer 128 Bits',
	'ldmxcsr': 'Load MXCSR Register',
	'lds': 'Load Far Pointer',
	'lea': 'Load Effective Address',
	'leave': 'High Level Procedure Exit',
	'les': 'Load Far Pointer',
	'lfence': 'Load Fence',
	'lfs': 'Load Far Pointer',
	'lgdt': 'Load Global/Interrupt Descriptor Table Register',
	'lgs': 'Load Far Pointer',
	'lidt': 'Load Global/Interrupt Descriptor Table Register',
	'lldt': 'Load Local Descriptor Table Register',
	'lmsw': 'Load Machine Status Word',
	'lock': 'Assert LOCK# Signal Prefix',
	'lods': 'Load String',
	'lodsb': 'Load String',
	'lodsd': 'Load String',
	'lodsq': 'Load String',
	'lodsw': 'Load String',
	'loop': 'Loop According to ECX Counter',
	'loopcc': 'Loop According to ECX Counter',
	'lsl': 'Load Segment Limit',
	'lss': 'Load Far Pointer',
	'ltr': 'Load Task Register',
	'lzcnt': 'Count the Number of Leading Zero Bits',
	'maskmovdqu': 'Store Selected Bytes of Double Quadword',
	'maskmovq': 'Store Selected Bytes of Quadword',
	'maxpd': 'Maximum of Packed Double-Precision Floating-Point Values',
	'maxps': 'Maximum of Packed Single-Precision Floating-Point Values',
	'maxsd': 'Return Maximum Scalar Double-Precision Floating-Point Value',
	'maxss': 'Return Maximum Scalar Single-Precision Floating-Point Value',
	'mfence': 'Memory Fence',
	'minpd': 'Minimum of Packed Double-Precision Floating-Point Values',
	'minps': 'Minimum of Packed Single-Precision Floating-Point Values',
	'minsd': 'Return Minimum Scalar Double-Precision Floating-Point Value',
	'minss': 'Return Minimum Scalar Single-Precision Floating-Point Value',
	'monitor': 'Set Up Monitor Address',
	'mov': 'Move',
	'mov (1)': 'Move to/from Control Registers',
	'mov (2)': 'Move to/from Debug Registers',
	'movapd': 'Move Aligned Packed Double-Precision Floating-Point Values',
	'movaps': 'Move Aligned Packed Single-Precision Floating-Point Values',
	'movbe': 'Move Data After Swapping Bytes',
	'movd': 'Move Doubleword/Move Quadword',
	'movddup': 'Replicate Double FP Values',
	'movdir64b': 'Move 64 Bytes as Direct Store',
	'movdiri': 'Move Doubleword as Direct Store',
	'movdq2q': 'Move Quadword from XMM to MMX Technology Register',
	'movdqa': 'Move Aligned Packed Integer Values',
	'movdqu': 'Move Unaligned Packed Integer Values',
	'movhlps': 'Move Packed Single-Precision Floating-Point Values High to Low',
	'movhpd': 'Move High Packed Double-Precision Floating-Point Value',
	'movhps': 'Move High Packed Single-Precision Floating-Point Values',
	'movlhps': 'Move Packed Single-Precision Floating-Point Values Low to High',
	'movlpd': 'Move Low Packed Double-Precision Floating-Point Value',
	'movlps': 'Move Low Packed Single-Precision Floating-Point Values',
	'movmskpd': 'Extract Packed Double-Precision Floating-Point Sign Mask',
	'movmskps': 'Extract Packed Single-Precision Floating-Point Sign Mask',
	'movntdq': 'Store Packed Integers Using Non-Temporal Hint',
	'movntdqa': 'Load Double Quadword Non-Temporal Aligned Hint',
	'movnti': 'Store Doubleword Using Non-Temporal Hint',
	'movntpd': 'Store Packed Double-Precision Floating-Point Values Using Non-Temporal Hint',
	'movntps': 'Store Packed Single-Precision Floating-Point Values Using Non-Temporal Hint',
	'movntq': 'Store of Quadword Using Non-Temporal Hint',
	'movq': 'Move Doubleword/Move Quadword',
	'movq (1)': 'Move Quadword',
	'movq2dq': 'Move Quadword from MMX Technology to XMM Register',
	'movs': 'Move Data from String to String',
	'movsb': 'Move Data from String to String',
	'movsd': 'Move Data from String to String',
	'movsd (1)': 'Move or Merge Scalar Double-Precision Floating-Point Value',
	'movshdup': 'Replicate Single FP Values',
	'movsldup': 'Replicate Single FP Values',
	'movsq': 'Move Data from String to String',
	'movss': 'Move or Merge Scalar Single-Precision Floating-Point Value',
	'movsw': 'Move Data from String to String',
	'movsx': 'Move with Sign-Extension',
	'movsxd': 'Move with Sign-Extension',
	'movupd': 'Move Unaligned Packed Double-Precision Floating-Point Values',
	'movups': 'Move Unaligned Packed Single-Precision Floating-Point Values',
	'movzx': 'Move with Zero-Extend',
	'mpsadbw': 'Compute Multiple Packed Sums of Absolute Difference',
	'mul': 'Unsigned Multiply',
	'mulpd': 'Multiply Packed Double-Precision Floating-Point Values',
	'mulps': 'Multiply Packed Single-Precision Floating-Point Values',
	'mulsd': 'Multiply Scalar Double-Precision Floating-Point Value',
	'mulss': 'Multiply Scalar Single-Precision Floating-Point Values',
	'mulx': 'Unsigned Multiply Without Affecting Flags',
	'mwait': 'Monitor Wait',
	'neg': 'Two's Complement Negation',
	'nop': 'No Operation',
	'not': 'One's Complement Negation',
	'or': 'Logical Inclusive OR',
	'orpd': 'Bitwise Logical OR of Packed Double Precision Floating-Point Values',
	'orps': 'Bitwise Logical OR of Packed Single Precision Floating-Point Values',
	'out': 'Output to Port',
	'outs': 'Output String to Port',
	'outsb': 'Output String to Port',
	'outsd': 'Output String to Port',
	'outsw': 'Output String to Port',
	'pabsb': 'Packed Absolute Value',
	'pabsd': 'Packed Absolute Value',
	'pabsq': 'Packed Absolute Value',
	'pabsw': 'Packed Absolute Value',
	'packssdw': 'Pack with Signed Saturation',
	'packsswb': 'Pack with Signed Saturation',
	'packusdw': 'Pack with Unsigned Saturation',
	'packuswb': 'Pack with Unsigned Saturation',
	'paddb': 'Add Packed Integers',
	'paddd': 'Add Packed Integers',
	'paddq': 'Add Packed Integers',
	'paddsb': 'Add Packed Signed Integers with Signed Saturation',
	'paddsw': 'Add Packed Signed Integers with Signed Saturation',
	'paddusb': 'Add Packed Unsigned Integers with Unsigned Saturation',
	'paddusw': 'Add Packed Unsigned Integers with Unsigned Saturation',
	'paddw': 'Add Packed Integers',
	'palignr': 'Packed Align Right',
	'pand': 'Logical AND',
	'pandn': 'Logical AND NOT',
	'pause': 'Spin Loop Hint',
	'pavgb': 'Average Packed Integers',
	'pavgw': 'Average Packed Integers',
	'pblendvb': 'Variable Blend Packed Bytes',
	'pblendw': 'Blend Packed Words',
	'pclmulqdq': 'Carry-Less Multiplication Quadword',
	'pcmpeqb': 'Compare Packed Data for Equal',
	'pcmpeqd': 'Compare Packed Data for Equal',
	'pcmpeqq': 'Compare Packed Qword Data for Equal',
	'pcmpeqw': 'Compare Packed Data for Equal',
	'pcmpestri': 'Packed Compare Explicit Length Strings, Return Index',
	'pcmpestrm': 'Packed Compare Explicit Length Strings, Return Mask',
	'pcmpgtb': 'Compare Packed Signed Integers for Greater Than',
	'pcmpgtd': 'Compare Packed Signed Integers for Greater Than',
	'pcmpgtq': 'Compare Packed Data for Greater Than',
	'pcmpgtw': 'Compare Packed Signed Integers for Greater Than',
	'pcmpistri': 'Packed Compare Implicit Length Strings, Return Index',
	'pcmpistrm': 'Packed Compare Implicit Length Strings, Return Mask',
	'pdep': 'Parallel Bits Deposit',
	'pext': 'Parallel Bits Extract',
	'pextrb': 'Extract Byte/Dword/Qword',
	'pextrd': 'Extract Byte/Dword/Qword',
	'pextrq': 'Extract Byte/Dword/Qword',
	'pextrw': 'Extract Word',
	'phaddd': 'Packed Horizontal Add',
	'phaddsw': 'Packed Horizontal Add and Saturate',
	'phaddw': 'Packed Horizontal Add',
	'phminposuw': 'Packed Horizontal Word Minimum',
	'phsubd': 'Packed Horizontal Subtract',
	'phsubsw': 'Packed Horizontal Subtract and Saturate',
	'phsubw': 'Packed Horizontal Subtract',
	'pinsrb': 'Insert Byte/Dword/Qword',
	'pinsrd': 'Insert Byte/Dword/Qword',
	'pinsrq': 'Insert Byte/Dword/Qword',
	'pinsrw': 'Insert Word',
	'pmaddubsw': 'Multiply and Add Packed Signed and Unsigned Bytes',
	'pmaddwd': 'Multiply and Add Packed Integers',
	'pmaxsb': 'Maximum of Packed Signed Integers',
	'pmaxsd': 'Maximum of Packed Signed Integers',
	'pmaxsq': 'Maximum of Packed Signed Integers',
	'pmaxsw': 'Maximum of Packed Signed Integers',
	'pmaxub': 'Maximum of Packed Unsigned Integers',
	'pmaxud': 'Maximum of Packed Unsigned Integers',
	'pmaxuq': 'Maximum of Packed Unsigned Integers',
	'pmaxuw': 'Maximum of Packed Unsigned Integers',
	'pminsb': 'Minimum of Packed Signed Integers',
	'pminsd': 'Minimum of Packed Signed Integers',
	'pminsq': 'Minimum of Packed Signed Integers',
	'pminsw': 'Minimum of Packed Signed Integers',
	'pminub': 'Minimum of Packed Unsigned Integers',
	'pminud': 'Minimum of Packed Unsigned Integers',
	'pminuq': 'Minimum of Packed Unsigned Integers',
	'pminuw': 'Minimum of Packed Unsigned Integers',
	'pmovmskb': 'Move Byte Mask',
	'pmovsx': 'Packed Move with Sign Extend',
	'pmovzx': 'Packed Move with Zero Extend',
	'pmuldq': 'Multiply Packed Doubleword Integers',
	'pmulhrsw': 'Packed Multiply High with Round and Scale',
	'pmulhuw': 'Multiply Packed Unsigned Integers and Store High Result',
	'pmulhw': 'Multiply Packed Signed Integers and Store High Result',
	'pmulld': 'Multiply Packed Integers and Store Low Result',
	'pmullq': 'Multiply Packed Integers and Store Low Result',
	'pmullw': 'Multiply Packed Signed Integers and Store Low Result',
	'pmuludq': 'Multiply Packed Unsigned Doubleword Integers',
	'pop': 'Pop a Value from the Stack',
	'popa': 'Pop All General-Purpose Registers',
	'popad': 'Pop All General-Purpose Registers',
	'popcnt': 'Return the Count of Number of Bits Set to 1',
	'popf': 'Pop Stack into EFLAGS Register',
	'popfd': 'Pop Stack into EFLAGS Register',
	'popfq': 'Pop Stack into EFLAGS Register',
	'por': 'Bitwise Logical OR',
	'prefetchw': 'Prefetch Data into Caches in Anticipation of a Write',
	'prefetchh': 'Prefetch Data Into Caches',
	'psadbw': 'Compute Sum of Absolute Differences',
	'pshufb': 'Packed Shuffle Bytes',
	'pshufd': 'Shuffle Packed Doublewords',
	'pshufhw': 'Shuffle Packed High Words',
	'pshuflw': 'Shuffle Packed Low Words',
	'pshufw': 'Shuffle Packed Words',
	'psignb': 'Packed SIGN',
	'psignd': 'Packed SIGN',
	'psignw': 'Packed SIGN',
	'pslld': 'Shift Packed Data Left Logical',
	'pslldq': 'Shift Double Quadword Left Logical',
	'psllq': 'Shift Packed Data Left Logical',
	'psllw': 'Shift Packed Data Left Logical',
	'psrad': 'Shift Packed Data Right Arithmetic',
	'psraq': 'Shift Packed Data Right Arithmetic',
	'psraw': 'Shift Packed Data Right Arithmetic',
	'psrld': 'Shift Packed Data Right Logical',
	'psrldq': 'Shift Double Quadword Right Logical',
	'psrlq': 'Shift Packed Data Right Logical',
	'psrlw': 'Shift Packed Data Right Logical',
	'psubb': 'Subtract Packed Integers',
	'psubd': 'Subtract Packed Integers',
	'psubq': 'Subtract Packed Quadword Integers',
	'psubsb': 'Subtract Packed Signed Integers with Signed Saturation',
	'psubsw': 'Subtract Packed Signed Integers with Signed Saturation',
	'psubusb': 'Subtract Packed Unsigned Integers with Unsigned Saturation',
	'psubusw': 'Subtract Packed Unsigned Integers with Unsigned Saturation',
	'psubw': 'Subtract Packed Integers',
	'ptest': 'Logical Compare',
	'ptwrite': 'Write Data to a Processor Trace Packet',
	'punpckhbw': 'Unpack High Data',
	'punpckhdq': 'Unpack High Data',
	'punpckhqdq': 'Unpack High Data',
	'punpckhwd': 'Unpack High Data',
	'punpcklbw': 'Unpack Low Data',
	'punpckldq': 'Unpack Low Data',
	'punpcklqdq': 'Unpack Low Data',
	'punpcklwd': 'Unpack Low Data',
	'push': 'Push Word, Doubleword or Quadword Onto the Stack',
	'pusha': 'Push All General-Purpose Registers',
	'pushad': 'Push All General-Purpose Registers',
	'pushf': 'Push EFLAGS Register onto the Stack',
	'pushfd': 'Push EFLAGS Register onto the Stack',
	'pushfq': 'Push EFLAGS Register onto the Stack',
	'pxor': 'Logical Exclusive OR',
	'rcl': 'Rotate',
	'rcpps': 'Compute Reciprocals of Packed Single-Precision Floating-Point Values',
	'rcpss': 'Compute Reciprocal of Scalar Single-Precision Floating-Point Values',
	'rcr': 'Rotate',
	'rdfsbase': 'Read FS/GS Segment Base',
	'rdgsbase': 'Read FS/GS Segment Base',
	'rdmsr': 'Read from Model Specific Register',
	'rdpid': 'Read Processor ID',
	'rdpkru': 'Read Protection Key Rights for User Pages',
	'rdpmc': 'Read Performance-Monitoring Counters',
	'rdrand': 'Read Random Number',
	'rdseed': 'Read Random SEED',
	'rdtsc': 'Read Time-Stamp Counter',
	'rdtscp': 'Read Time-Stamp Counter and Processor ID',
	'rep': 'Repeat String Operation Prefix',
	'repe': 'Repeat String Operation Prefix',
	'repne': 'Repeat String Operation Prefix',
	'repnz': 'Repeat String Operation Prefix',
	'repz': 'Repeat String Operation Prefix',
	'ret': 'Return from Procedure',
	'rol': 'Rotate',
	'ror': 'Rotate',
	'rorx': 'Rotate Right Logical Without Affecting Flags',
	'roundpd': 'Round Packed Double Precision Floating-Point Values',
	'roundps': 'Round Packed Single Precision Floating-Point Values',
	'roundsd': 'Round Scalar Double Precision Floating-Point Values',
	'roundss': 'Round Scalar Single Precision Floating-Point Values',
	'rsm': 'Resume from System Management Mode',
	'rsqrtps': 'Compute Reciprocals of Square Roots of Packed Single-Precision Floating-Point Values',
	'rsqrtss': 'Compute Reciprocal of Square Root of Scalar Single-Precision Floating-Point Value',
	'sahf': 'Store AH into Flags',
	'sal': 'Shift',
	'sar': 'Shift',
	'sarx': 'Shift Without Affecting Flags',
	'sbb': 'Integer Subtraction with Borrow',
	'scas': 'Scan String',
	'scasb': 'Scan String',
	'scasd': 'Scan String',
	'scasw': 'Scan String',
	'setcc': 'Set Byte on Condition',
	'sfence': 'Store Fence',
	'sgdt': 'Store Global Descriptor Table Register',
	'sha1msg1': 'Perform an Intermediate Calculation for the Next Four SHA1 Message Dwords',
	'sha1msg2': 'Perform a Final Calculation for the Next Four SHA1 Message Dwords',
	'sha1nexte': 'Calculate SHA1 State Variable E after Four Rounds',
	'sha1rnds4': 'Perform Four Rounds of SHA1 Operation',
	'sha256msg1': 'Perform an Intermediate Calculation for the Next Four SHA256 Message Dwords',
	'sha256msg2': 'Perform a Final Calculation for the Next Four SHA256 Message Dwords',
	'sha256rnds2': 'Perform Two Rounds of SHA256 Operation',
	'shl': 'Shift',
	'shld': 'Double Precision Shift Left',
	'shlx': 'Shift Without Affecting Flags',
	'shr': 'Shift',
	'shrd': 'Double Precision Shift Right',
	'shrx': 'Shift Without Affecting Flags',
	'shufpd': 'Packed Interleave Shuffle of Pairs of Double-Precision Floating-Point Values',
	'shufps': 'Packed Interleave Shuffle of Quadruplets of Single-Precision Floating-Point Values',
	'sidt': 'Store Interrupt Descriptor Table Register',
	'sldt': 'Store Local Descriptor Table Register',
	'smsw': 'Store Machine Status Word',
	'sqrtpd': 'Square Root of Double-Precision Floating-Point Values',
	'sqrtps': 'Square Root of Single-Precision Floating-Point Values',
	'sqrtsd': 'Compute Square Root of Scalar Double-Precision Floating-Point Value',
	'sqrtss': 'Compute Square Root of Scalar Single-Precision Value',
	'stac': 'Set AC Flag in EFLAGS Register',
	'stc': 'Set Carry Flag',
	'std': 'Set Direction Flag',
	'sti': 'Set Interrupt Flag',
	'stmxcsr': 'Store MXCSR Register State',
	'stos': 'Store String',
	'stosb': 'Store String',
	'stosd': 'Store String',
	'stosq': 'Store String',
	'stosw': 'Store String',
	'str': 'Store Task Register',
	'sub': 'Subtract',
	'subpd': 'Subtract Packed Double-Precision Floating-Point Values',
	'subps': 'Subtract Packed Single-Precision Floating-Point Values',
	'subsd': 'Subtract Scalar Double-Precision Floating-Point Value',
	'subss': 'Subtract Scalar Single-Precision Floating-Point Value',
	'swapgs': 'Swap GS Base Register',
	'syscall': 'Fast System Call',
	'sysenter': 'Fast System Call',
	'sysexit': 'Fast Return from Fast System Call',
	'sysret': 'Return From Fast System Call',
	'test': 'Logical Compare',
	'tpause': 'Timed PAUSE',
	'tzcnt': 'Count the Number of Trailing Zero Bits',
	'ucomisd': 'Unordered Compare Scalar Double-Precision Floating-Point Values and Set EFLAGS',
	'ucomiss': 'Unordered Compare Scalar Single-Precision Floating-Point Values and Set EFLAGS',
	'ud': 'Undefined Instruction',
	'umonitor': 'User Level Set Up Monitor Address',
	'umwait': 'User Level Monitor Wait',
	'unpckhpd': 'Unpack and Interleave High Packed Double-Precision Floating-Point Values',
	'unpckhps': 'Unpack and Interleave High Packed Single-Precision Floating-Point Values',
	'unpcklpd': 'Unpack and Interleave Low Packed Double-Precision Floating-Point Values',
	'unpcklps': 'Unpack and Interleave Low Packed Single-Precision Floating-Point Values',
	'valignd': 'Align Doubleword/Quadword Vectors',
	'valignq': 'Align Doubleword/Quadword Vectors',
	'vblendmpd': 'Blend Float64/Float32 Vectors Using an OpMask Control',
	'vblendmps': 'Blend Float64/Float32 Vectors Using an OpMask Control',
	'vbroadcast': 'Load with Broadcast Floating-Point Data',
	'vcompresspd': 'Store Sparse Packed Double-Precision Floating-Point Values into Dense Memory',
	'vcompressps': 'Store Sparse Packed Single-Precision Floating-Point Values into Dense Memory',
	'vcvtpd2qq': 'Convert Packed Double-Precision Floating-Point Values to Packed Quadword Integers',
	'vcvtpd2udq': 'Convert Packed Double-Precision Floating-Point Values to Packed Unsigned Doubleword Integers',
	'vcvtpd2uqq': 'Convert Packed Double-Precision Floating-Point Values to Packed Unsigned Quadword Integers',
	'vcvtph2ps': 'Convert 16-bit FP values to Single-Precision FP values',
	'vcvtps2ph': 'Convert Single-Precision FP value to 16-bit FP value',
	'vcvtps2qq': 'Convert Packed Single Precision Floating-Point Values to Packed Singed Quadword Integer Values',
	'vcvtps2udq': 'Convert Packed Single-Precision Floating-Point Values to Packed Unsigned Doubleword Integer Values',
	'vcvtps2uqq': 'Convert Packed Single Precision Floating-Point Values to Packed Unsigned Quadword Integer Values',
	'vcvtqq2pd': 'Convert Packed Quadword Integers to Packed Double-Precision Floating-Point Values',
	'vcvtqq2ps': 'Convert Packed Quadword Integers to Packed Single-Precision Floating-Point Values',
	'vcvtsd2usi': 'Convert Scalar Double-Precision Floating-Point Value to Unsigned Doubleword Integer',
	'vcvtss2usi': 'Convert Scalar Single-Precision Floating-Point Value to Unsigned Doubleword Integer',
	'vcvttpd2qq': 'Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Quadword Integers',
	'vcvttpd2udq': 'Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Unsigned Doubleword Integers',
	'vcvttpd2uqq': 'Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Unsigned Quadword Integers',
	'vcvttps2qq': 'Convert with Truncation Packed Single Precision Floating-Point Values to Packed Singed Quadword Integer Values',
	'vcvttps2udq': 'Convert with Truncation Packed Single-Precision Floating-Point Values to Packed Unsigned Doubleword Integer Values',
	'vcvttps2uqq': 'Convert with Truncation Packed Single Precision Floating-Point Values to Packed Unsigned Quadword Integer Values',
	'vcvttsd2usi': 'Convert with Truncation Scalar Double-Precision Floating-Point Value to Unsigned Integer',
	'vcvttss2usi': 'Convert with Truncation Scalar Single-Precision Floating-Point Value to Unsigned Integer',
	'vcvtudq2pd': 'Convert Packed Unsigned Doubleword Integers to Packed Double-Precision Floating-Point Values',
	'vcvtudq2ps': 'Convert Packed Unsigned Doubleword Integers to Packed Single-Precision Floating-Point Values',
	'vcvtuqq2pd': 'Convert Packed Unsigned Quadword Integers to Packed Double-Precision Floating-Point Values',
	'vcvtuqq2ps': 'Convert Packed Unsigned Quadword Integers to Packed Single-Precision Floating-Point Values',
	'vcvtusi2sd': 'Convert Unsigned Integer to Scalar Double-Precision Floating-Point Value',
	'vcvtusi2ss': 'Convert Unsigned Integer to Scalar Single-Precision Floating-Point Value',
	'vdbpsadbw': 'Double Block Packed Sum-Absolute-Differences (SAD) on Unsigned Bytes',
	'verr': 'Verify a Segment for Reading or Writing',
	'verw': 'Verify a Segment for Reading or Writing',
	'vexpandpd': 'Load Sparse Packed Double-Precision Floating-Point Values from Dense Memory',
	'vexpandps': 'Load Sparse Packed Single-Precision Floating-Point Values from Dense Memory',
	'vextractf128': 'Extra ct Packed Floating-Point Values',
	'vextractf32x4': 'Extra ct Packed Floating-Point Values',
	'vextractf32x8': 'Extra ct Packed Floating-Point Values',
	'vextractf64x2': 'Extra ct Packed Floating-Point Values',
	'vextractf64x4': 'Extra ct Packed Floating-Point Values',
	'vextracti128': 'Extract packed Integer Values',
	'vextracti32x4': 'Extract packed Integer Values',
	'vextracti32x8': 'Extract packed Integer Values',
	'vextracti64x2': 'Extract packed Integer Values',
	'vextracti64x4': 'Extract packed Integer Values',
	'vfixupimmpd': 'Fix Up Special Packed Float64 Values',
	'vfixupimmps': 'Fix Up Special Packed Float32 Values',
	'vfixupimmsd': 'Fix Up Special Scalar Float64 Value',
	'vfixupimmss': 'Fix Up Special Scalar Float32 Value',
	'vfmadd132pd': 'Fused Multiply-Add of Packed Double- Precision Floating-Point Values',
	'vfmadd132ps': 'Fused Multiply-Add of Packed Single- Precision Floating-Point Values',
	'vfmadd132sd': 'Fused Multiply-Add of Scalar Double- Precision Floating-Point Values',
	'vfmadd132ss': 'Fused Multiply-Add of Scalar Single-Precision Floating-Point Values',
	'vfmadd213pd': 'Fused Multiply-Add of Packed Double- Precision Floating-Point Values',
	'vfmadd213ps': 'Fused Multiply-Add of Packed Single- Precision Floating-Point Values',
	'vfmadd213sd': 'Fused Multiply-Add of Scalar Double- Precision Floating-Point Values',
	'vfmadd213ss': 'Fused Multiply-Add of Scalar Single-Precision Floating-Point Values',
	'vfmadd231pd': 'Fused Multiply-Add of Packed Double- Precision Floating-Point Values',
	'vfmadd231ps': 'Fused Multiply-Add of Packed Single- Precision Floating-Point Values',
	'vfmadd231sd': 'Fused Multiply-Add of Scalar Double- Precision Floating-Point Values',
	'vfmadd231ss': 'Fused Multiply-Add of Scalar Single-Precision Floating-Point Values',
	'vfmaddsub132pd': 'Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values',
	'vfmaddsub132ps': 'Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values',
	'vfmaddsub213pd': 'Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values',
	'vfmaddsub213ps': 'Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values',
	'vfmaddsub231pd': 'Fused Multiply-Alternating Add/Subtract of Packed Double-Precision Floating-Point Values',
	'vfmaddsub231ps': 'Fused Multiply-Alternating Add/Subtract of Packed Single-Precision Floating-Point Values',
	'vfmsub132pd': 'Fused Multiply-Subtract of Packed Double- Precision Floating-Point Values',
	'vfmsub132ps': 'Fused Multiply-Subtract of Packed Single- Precision Floating-Point Values',
	'vfmsub132sd': 'Fused Multiply-Subtract of Scalar Double- Precision Floating-Point Values',
	'vfmsub132ss': 'Fused Multiply-Subtract of Scalar Single- Precision Floating-Point Values',
	'vfmsub213pd': 'Fused Multiply-Subtract of Packed Double- Precision Floating-Point Values',
	'vfmsub213ps': 'Fused Multiply-Subtract of Packed Single- Precision Floating-Point Values',
	'vfmsub213sd': 'Fused Multiply-Subtract of Scalar Double- Precision Floating-Point Values',
	'vfmsub213ss': 'Fused Multiply-Subtract of Scalar Single- Precision Floating-Point Values',
	'vfmsub231pd': 'Fused Multiply-Subtract of Packed Double- Precision Floating-Point Values',
	'vfmsub231ps': 'Fused Multiply-Subtract of Packed Single- Precision Floating-Point Values',
	'vfmsub231sd': 'Fused Multiply-Subtract of Scalar Double- Precision Floating-Point Values',
	'vfmsub231ss': 'Fused Multiply-Subtract of Scalar Single- Precision Floating-Point Values',
	'vfmsubadd132pd': 'Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values',
	'vfmsubadd132ps': 'Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values',
	'vfmsubadd213pd': 'Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values',
	'vfmsubadd213ps': 'Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values',
	'vfmsubadd231pd': 'Fused Multiply-Alternating Subtract/Add of Packed Double-Precision Floating-Point Values',
	'vfmsubadd231ps': 'Fused Multiply-Alternating Subtract/Add of Packed Single-Precision Floating-Point Values',
	'vfnmadd132pd': 'Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values',
	'vfnmadd132ps': 'Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values',
	'vfnmadd132sd': 'Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values',
	'vfnmadd132ss': 'Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values',
	'vfnmadd213pd': 'Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values',
	'vfnmadd213ps': 'Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values',
	'vfnmadd213sd': 'Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values',
	'vfnmadd213ss': 'Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values',
	'vfnmadd231pd': 'Fused Negative Multiply-Add of Packed Double-Precision Floating-Point Values',
	'vfnmadd231ps': 'Fused Negative Multiply-Add of Packed Single-Precision Floating-Point Values',
	'vfnmadd231sd': 'Fused Negative Multiply-Add of Scalar Double-Precision Floating-Point Values',
	'vfnmadd231ss': 'Fused Negative Multiply-Add of Scalar Single-Precision Floating-Point Values',
	'vfnmsub132pd': 'Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values',
	'vfnmsub132ps': 'Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values',
	'vfnmsub132sd': 'Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values',
	'vfnmsub132ss': 'Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values',
	'vfnmsub213pd': 'Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values',
	'vfnmsub213ps': 'Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values',
	'vfnmsub213sd': 'Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values',
	'vfnmsub213ss': 'Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values',
	'vfnmsub231pd': 'Fused Negative Multiply-Subtract of Packed Double-Precision Floating-Point Values',
	'vfnmsub231ps': 'Fused Negative Multiply-Subtract of Packed Single-Precision Floating-Point Values',
	'vfnmsub231sd': 'Fused Negative Multiply-Subtract of Scalar Double-Precision Floating-Point Values',
	'vfnmsub231ss': 'Fused Negative Multiply-Subtract of Scalar Single-Precision Floating-Point Values',
	'vfpclasspd': 'Tests Types Of a Packed Float64 Values',
	'vfpclassps': 'Tests Types Of a Packed Float32 Values',
	'vfpclasssd': 'Tests Types Of a Scalar Float64 Values',
	'vfpclassss': 'Tests Types Of a Scalar Float32 Values',
	'vgatherdpd': 'Gather Packed DP FP Values Using Signed Dword/Qword Indices',
	'vgatherdpd (1)': 'Gather Packed Single, Packed Double with Signed Dword',
	'vgatherdps': 'Gather Packed SP FP values Using Signed Dword/Qword Indices',
	'vgatherdps (1)': 'Gather Packed Single, Packed Double with Signed Dword',
	'vgatherqpd': 'Gather Packed DP FP Values Using Signed Dword/Qword Indices',
	'vgatherqpd (1)': 'Gather Packed Single, Packed Double with Signed Qword Indices',
	'vgatherqps': 'Gather Packed SP FP values Using Signed Dword/Qword Indices',
	'vgatherqps (1)': 'Gather Packed Single, Packed Double with Signed Qword Indices',
	'vgetexppd': 'Convert Exponents of Packed DP FP Values to DP FP Values',
	'vgetexpps': 'Convert Exponents of Packed SP FP Values to SP FP Values',
	'vgetexpsd': 'Convert Exponents of Scalar DP FP Values to DP FP Value',
	'vgetexpss': 'Convert Exponents of Scalar SP FP Values to SP FP Value',
	'vgetmantpd': 'Extract Float64 Vector of Normalized Mantissas from Float64 Vector',
	'vgetmantps': 'Extract Float32 Vector of Normalized Mantissas from Float32 Vector',
	'vgetmantsd': 'Extract Float64 of Normalized Mantissas from Float64 Scalar',
	'vgetmantss': 'Extract Float32 Vector of Normalized Mantissa from Float32 Vector',
	'vinsertf128': 'Insert Packed Floating-Point Values',
	'vinsertf32x4': 'Insert Packed Floating-Point Values',
	'vinsertf32x8': 'Insert Packed Floating-Point Values',
	'vinsertf64x2': 'Insert Packed Floating-Point Values',
	'vinsertf64x4': 'Insert Packed Floating-Point Values',
	'vinserti128': 'Insert Packed Integer Values',
	'vinserti32x4': 'Insert Packed Integer Values',
	'vinserti32x8': 'Insert Packed Integer Values',
	'vinserti64x2': 'Insert Packed Integer Values',
	'vinserti64x4': 'Insert Packed Integer Values',
	'vmaskmov': 'Conditional SIMD Packed Loads and Stores',
	'vmovdqa32': 'Move Aligned Packed Integer Values',
	'vmovdqa64': 'Move Aligned Packed Integer Values',
	'vmovdqu16': 'Move Unaligned Packed Integer Values',
	'vmovdqu32': 'Move Unaligned Packed Integer Values',
	'vmovdqu64': 'Move Unaligned Packed Integer Values',
	'vmovdqu8': 'Move Unaligned Packed Integer Values',
	'vpblendd': 'Blend Packed Dwords',
	'vpblendmb': 'Blend Byte/Word Vectors Using an Opmask Control',
	'vpblendmd': 'Blend Int32/Int64 Vectors Using an OpMask Control',
	'vpblendmq': 'Blend Int32/Int64 Vectors Using an OpMask Control',
	'vpblendmw': 'Blend Byte/Word Vectors Using an Opmask Control',
	'vpbroadcast': 'Load Integer and Broadcast',
	'vpbroadcastb': 'Load with Broadcast Integer Data from General Purpose Register',
	'vpbroadcastd': 'Load with Broadcast Integer Data from General Purpose Register',
	'vpbroadcastm': 'Broadcast Mask to Vector Register',
	'vpbroadcastq': 'Load with Broadcast Integer Data from General Purpose Register',
	'vpbroadcastw': 'Load with Broadcast Integer Data from General Purpose Register',
	'vpcmpb': 'Compare Packed Byte Values Into Mask',
	'vpcmpd': 'Compare Packed Integer Values into Mask',
	'vpcmpq': 'Compare Packed Integer Values into Mask',
	'vpcmpub': 'Compare Packed Byte Values Into Mask',
	'vpcmpud': 'Compare Packed Integer Values into Mask',
	'vpcmpuq': 'Compare Packed Integer Values into Mask',
	'vpcmpuw': 'Compare Packed Word Values Into Mask',
	'vpcmpw': 'Compare Packed Word Values Into Mask',
	'vpcompressd': 'Store Sparse Packed Doubleword Integer Values into Dense Memory/Register',
	'vpcompressq': 'Store Sparse Packed Quadword Integer Values into Dense Memory/Register',
	'vpconflictd': 'Detect Conflicts Within a Vector of Packed Dword/Qword Values into Dense Memory/ Register',
	'vpconflictq': 'Detect Conflicts Within a Vector of Packed Dword/Qword Values into Dense Memory/ Register',
	'vperm2f128': 'Permute Floating-Point Values',
	'vperm2i128': 'Permute Integer Values',
	'vpermb': 'Permute Packed Bytes Elements',
	'vpermd': 'Permute Packed Doublewords/Words Elements',
	'vpermi2b': 'Full Permute of Bytes from Two Tables Overwriting the Index',
	'vpermi2d': 'Full Permute From Two Tables Overwriting the Index',
	'vpermi2pd': 'Full Permute From Two Tables Overwriting the Index',
	'vpermi2ps': 'Full Permute From Two Tables Overwriting the Index',
	'vpermi2q': 'Full Permute From Two Tables Overwriting the Index',
	'vpermi2w': 'Full Permute From Two Tables Overwriting the Index',
	'vpermilpd': 'Permute In-Lane of Pairs of Double-Precision Floating-Point Values',
	'vpermilps': 'Permute In-Lane of Quadruples of Single-Precision Floating-Point Values',
	'vpermpd': 'Permute Double-Precision Floating-Point Elements',
	'vpermps': 'Permute Single-Precision Floating-Point Elements',
	'vpermq': 'Qwords Element Permutation',
	'vpermt2b': 'Full Permute of Bytes from Two Tables Overwriting a Table',
	'vpermt2d': 'Full Permute from Two Tables Overwriting one Table',
	'vpermt2pd': 'Full Permute from Two Tables Overwriting one Table',
	'vpermt2ps': 'Full Permute from Two Tables Overwriting one Table',
	'vpermt2q': 'Full Permute from Two Tables Overwriting one Table',
	'vpermt2w': 'Full Permute from Two Tables Overwriting one Table',
	'vpermw': 'Permute Packed Doublewords/Words Elements',
	'vpexpandd': 'Load Sparse Packed Doubleword Integer Values from Dense Memory / Register',
	'vpexpandq': 'Load Sparse Packed Quadword Integer Values from Dense Memory / Register',
	'vpgatherdd': 'Gather Packed Dword Values Using Signed Dword/Qword Indices',
	'vpgatherdd (1)': 'Gather Packed Dword, Packed Qword with Signed Dword Indices',
	'vpgatherdq': 'Gather Packed Dword, Packed Qword with Signed Dword Indices',
	'vpgatherdq (1)': 'Gather Packed Qword Values Using Signed Dword/Qword Indices',
	'vpgatherqd': 'Gather Packed Dword Values Using Signed Dword/Qword Indices',
	'vpgatherqd (1)': 'Gather Packed Dword, Packed Qword with Signed Qword Indices',
	'vpgatherqq': 'Gather Packed Qword Values Using Signed Dword/Qword Indices',
	'vpgatherqq (1)': 'Gather Packed Dword, Packed Qword with Signed Qword Indices',
	'vplzcntd': 'Count the Number of Leading Zero Bits for Packed Dword, Packed Qword Values',
	'vplzcntq': 'Count the Number of Leading Zero Bits for Packed Dword, Packed Qword Values',
	'vpmadd52huq': 'Packed Multiply of Unsigned 52-bit Unsigned Integers and Add High 52-bit Products to 64-bit Accumulators',
	'vpmadd52luq': 'Packed Multiply of Unsigned 52-bit Integers and Add the Low 52-bit Products to Qword Accumulators',
	'vpmaskmov': 'Conditional SIMD Integer Packed Loads and Stores',
	'vpmovb2m': 'Convert a Vector Register to a Mask',
	'vpmovd2m': 'Convert a Vector Register to a Mask',
	'vpmovdb': 'Down Convert DWord to Byte',
	'vpmovdw': 'Down Convert DWord to Word',
	'vpmovm2b': 'Convert a Mask Register to a Vector Register',
	'vpmovm2d': 'Convert a Mask Register to a Vector Register',
	'vpmovm2q': 'Convert a Mask Register to a Vector Register',
	'vpmovm2w': 'Convert a Mask Register to a Vector Register',
	'vpmovq2m': 'Convert a Vector Register to a Mask',
	'vpmovqb': 'Down Convert QWord to Byte',
	'vpmovqd': 'Down Convert QWord to DWord',
	'vpmovqw': 'Down Convert QWord to Word',
	'vpmovsdb': 'Down Convert DWord to Byte',
	'vpmovsdw': 'Down Convert DWord to Word',
	'vpmovsqb': 'Down Convert QWord to Byte',
	'vpmovsqd': 'Down Convert QWord to DWord',
	'vpmovsqw': 'Down Convert QWord to Word',
	'vpmovswb': 'Down Convert Word to Byte',
	'vpmovusdb': 'Down Convert DWord to Byte',
	'vpmovusdw': 'Down Convert DWord to Word',
	'vpmovusqb': 'Down Convert QWord to Byte',
	'vpmovusqd': 'Down Convert QWord to DWord',
	'vpmovusqw': 'Down Convert QWord to Word',
	'vpmovuswb': 'Down Convert Word to Byte',
	'vpmovw2m': 'Convert a Vector Register to a Mask',
	'vpmovwb': 'Down Convert Word to Byte',
	'vpmultishiftqb': 'Select Packed Unaligned Bytes from Quadword Sources',
	'vprold': 'Bit Rotate Left',
	'vprolq': 'Bit Rotate Left',
	'vprolvd': 'Bit Rotate Left',
	'vprolvq': 'Bit Rotate Left',
	'vprord': 'Bit Rotate Right',
	'vprorq': 'Bit Rotate Right',
	'vprorvd': 'Bit Rotate Right',
	'vprorvq': 'Bit Rotate Right',
	'vpscatterdd': 'Scatter Packed Dword, Packed Qword with Signed Dword, Signed Qword Indices',
	'vpscatterdq': 'Scatter Packed Dword, Packed Qword with Signed Dword, Signed Qword Indices',
	'vpscatterqd': 'Scatter Packed Dword, Packed Qword with Signed Dword, Signed Qword Indices',
	'vpscatterqq': 'Scatter Packed Dword, Packed Qword with Signed Dword, Signed Qword Indices',
	'vpsllvd': 'Variable Bit Shift Left Logical',
	'vpsllvq': 'Variable Bit Shift Left Logical',
	'vpsllvw': 'Variable Bit Shift Left Logical',
	'vpsravd': 'Variable Bit Shift Right Arithmetic',
	'vpsravq': 'Variable Bit Shift Right Arithmetic',
	'vpsravw': 'Variable Bit Shift Right Arithmetic',
	'vpsrlvd': 'Variable Bit Shift Right Logical',
	'vpsrlvq': 'Variable Bit Shift Right Logical',
	'vpsrlvw': 'Variable Bit Shift Right Logical',
	'vpternlogd': 'Bitwise Ternary Logic',
	'vpternlogq': 'Bitwise Ternary Logic',
	'vptestmb': 'Logical AND and Set Mask',
	'vptestmd': 'Logical AND and Set Mask',
	'vptestmq': 'Logical AND and Set Mask',
	'vptestmw': 'Logical AND and Set Mask',
	'vptestnmb': 'Logical NAND and Set',
	'vptestnmd': 'Logical NAND and Set',
	'vptestnmq': 'Logical NAND and Set',
	'vptestnmw': 'Logical NAND and Set',
	'vrangepd': 'Range Restriction Calculation For Packed Pairs of Float64 Values',
	'vrangeps': 'Range Restriction Calculation For Packed Pairs of Float32 Values',
	'vrangesd': 'Range Restriction Calculation From a pair of Scalar Float64 Values',
	'vrangess': 'Range Restriction Calculation From a Pair of Scalar Float32 Values',
	'vrcp14pd': 'Compute Approximate Reciprocals of Packed Float64 Values',
	'vrcp14ps': 'Compute Approximate Reciprocals of Packed Float32 Values',
	'vrcp14sd': 'Compute Approximate Reciprocal of Scalar Float64 Value',
	'vrcp14ss': 'Compute Approximate Reciprocal of Scalar Float32 Value',
	'vreducepd': 'Perform Reduction Transformation on Packed Float64 Values',
	'vreduceps': 'Perform Reduction Transformation on Packed Float32 Values',
	'vreducesd': 'Perform a Reduction Transformation on a Scalar Float64 Value',
	'vreducess': 'Perform a Reduction Transformation on a Scalar Float32 Value',
	'vrndscalepd': 'Round Packed Float64 Values To Include A Given Number Of Fraction Bits',
	'vrndscaleps': 'Round Packed Float32 Values To Include A Given Number Of Fraction Bits',
	'vrndscalesd': 'Round Scalar Float64 Value To Include A Given Number Of Fraction Bits',
	'vrndscaless': 'Round Scalar Float32 Value To Include A Given Number Of Fraction Bits',
	'vrsqrt14pd': 'Compute Approximate Reciprocals of Square Roots of Packed Float64 Values',
	'vrsqrt14ps': 'Compute Approximate Reciprocals of Square Roots of Packed Float32 Values',
	'vrsqrt14sd': 'Compute Approximate Reciprocal of Square Root of Scalar Float64 Value',
	'vrsqrt14ss': 'Compute Approximate Reciprocal of Square Root of Scalar Float32 Value',
	'vscalefpd': 'Scale Packed Float64 Values With Float64 Values',
	'vscalefps': 'Scale Packed Float32 Values With Float32 Values',
	'vscalefsd': 'Scale Scalar Float64 Values With Float64 Values',
	'vscalefss': 'Scale Scalar Float32 Value With Float32 Value',
	'vscatterdpd': 'Scatter Packed Single, Packed Double with Signed Dword and Qword Indices',
	'vscatterdps': 'Scatter Packed Single, Packed Double with Signed Dword and Qword Indices',
	'vscatterqpd': 'Scatter Packed Single, Packed Double with Signed Dword and Qword Indices',
	'vscatterqps': 'Scatter Packed Single, Packed Double with Signed Dword and Qword Indices',
	'vshuff32x4': 'Shuffle Packed Values at 128-bit Granularity',
	'vshuff64x2': 'Shuffle Packed Values at 128-bit Granularity',
	'vshufi32x4': 'Shuffle Packed Values at 128-bit Granularity',
	'vshufi64x2': 'Shuffle Packed Values at 128-bit Granularity',
	'vtestpd': 'Packed Bit Test',
	'vtestps': 'Packed Bit Test',
	'vzeroall': 'Zero All YMM Registers',
	'vzeroupper': 'Zero Upper Bits of YMM Registers',
	'wait': 'Wait',
	'wbinvd': 'Write Back and Invalidate Cache',
	'wrfsbase': 'Write FS/GS Segment Base',
	'wrgsbase': 'Write FS/GS Segment Base',
	'wrmsr': 'Write to Model Specific Register',
	'wrpkru': 'Write Data to User Page Key Register',
	'xabort': 'Transactional Abort',
	'xacquire': 'Hardware Lock Elision Prefix Hints',
	'xadd': 'Exchange and Add',
	'xbegin': 'Transactional Begin',
	'xchg': 'Exchange Register/Memory with Register',
	'xend': 'Transactional End',
	'xgetbv': 'Get Value of Extended Control Register',
	'xlat': 'Table Look-up Translation',
	'xlatb': 'Table Look-up Translation',
	'xor': 'Logical Exclusive OR',
	'xorpd': 'Bitwise Logical XOR of Packed Double Precision Floating-Point Values',
	'xorps': 'Bitwise Logical XOR of Packed Single Precision Floating-Point Values',
	'xrelease': 'Hardware Lock Elision Prefix Hints',
	'xrstor': 'Restore Processor Extended States',
	'xrstors': 'Restore Processor Extended States Supervisor',
	'xsave': 'Save Processor Extended States',
	'xsavec': 'Save Processor Extended States with Compaction',
	'xsaveopt': 'Save Processor Extended States Optimized',
	'xsaves': 'Save Processor Extended States Supervisor',
	'xsetbv': 'Set Extended Control Register',
	'xtest': 'Test If In Transactional Execution',
} as { [key: string]: string | undefined };
